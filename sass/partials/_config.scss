/* apply a natural box layout model to all elements */
* { -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; }

@import "compass/css3";
@import "compass/utilities";
@import "compass/layout";
@import "compass/typography";

//========== SPRITES ========== 
// @import "sprites/*.png";




/* =VARIABLES
-------------------------------------------------------------- */
/*===== Colors =====*/
// $brown: #a79b85;
// $pink: #e8ceb3;
// $cream: #f4ecdf;
// $green_light: #b9cebd;
// $green: #97b1a6;
// $grey: #666666;

// Color Pallate Reference - http://pinterest.com/pin/20477373278606093/
// $blue: #a8bbb9;
// $blue_light: #d4e3de;
// $green: #a3b995;
// $cream: #f9ddb8;
// $orange: #eb7f65;
// $orange_light: #fbbd96;


// Color Pallate Option #3
// $purple: #6a5f70;
// $coral: #ffa89c;
// $grey: #666666;
// $grey_light: #d8cec5;

// Yet another color pallate option
$blue: #75869c;
$peach: #fee0c4;
$grey: #666666;
$grey_light: #d8cec5;



/*===== Fonts =====*/
$script_font: 'Engagement', cursive;
$header_font: 'Rokkitt', serif;




/*===== Dimensions =====*/
$rembase:     16;
$line-height: 24;

/*===== Grid =====*/
$gutter: 4%;

$bezier: cubic-bezier(0.6, 0, 0.4, 1);


/* =MIXINS
-------------------------------------------------------------- */

@mixin text_wrap() {
	white-space: pre;           /* CSS 2.0 */
	white-space: pre-wrap;      /* CSS 2.1 */
	white-space: pre-line;      /* CSS 3.0 */
	white-space: -pre-wrap;     /* Opera 4-6 */
	white-space: -o-pre-wrap;   /* Opera 7 */
	white-space: -moz-pre-wrap; /* Mozilla */
	white-space: -hp-pre-wrap;  /* HP Printers */
	word-wrap: break-word;      /* IE 5+ */
}


// TODO: Test this ... may need some adjustments.
@mixin font-stack($font) {
	@font-face {
    font-family: '$font';
    src: url('$font.eot');
    src: url('$font.eot?#iefix') format('embedded-opentype'),
         url('$font.woff') format('woff'),
         url('$font.ttf') format('truetype'),
         url('$font.svg#$font') format('svg');
    font-weight: normal;
    font-style: normal;

	}
}


@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem-calc($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*10}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  } 

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  } 
  
  #{$property}: $pxValues; 
  #{$property}: $remValues; 
}


@mixin fpr($width:100%, $dir:left) {
  float:$dir; position:relative;
  width:$width;
}



@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}



@mixin clearfix() {
    & {
        *zoom: 1;
    }
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}



@mixin breakpoint($point) {
  @if $point == large {
    // Minimum width of 960 pixels = 60.9375em.
    @media (min-width: 960px) { @content; }
  }
  @else if $point == medium {
    // Minimum width of 860 pixels = 53.75em.
    @media (min-width: 860px) { @content; }
  }
  @else if $point == small {
    // Minimum width of 600 pixels = 37.5em.
    @media (min-width: 600px)  { @content; }
  }
  @else {
    @media (min-width: $point) { @content; }
  }
}




//TODO: ADD IN AFTER RETINA IMAGES PREPARED -
// Retina Images - http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss
// @mixin image-2x($image, $width, $height) {
//   @media (min--moz-device-pixel-ratio: 1.3),
//          (-o-min-device-pixel-ratio: 2.6/2),
//          (-webkit-min-device-pixel-ratio: 1.3),
//          (min-device-pixel-ratio: 1.3),
//          (min-resolution: 1.3dppx) {
//     /* on retina, use image that's scaled by 2 */
//     background-image: url($image);
//     background-size: $width $height;
//   }
// }



// //Retina Sprites - https://github.com/AdamBrodzinski/Retina-Sprites-for-Compass
// $sprites: sprite-map("sprites/*.png");            // import 1x sprites
// $sprites2x: sprite-map("sprites-retina/*.png");   // import 2x sprites

// // If you would like to add padding to your sprites, use the spacing parameter and double the value for the retina version:
// //$sprites: sprite-map("sprites/buttons/*.png", $spacing: 10px);            // import 1x sprites, 10px padding
// //$sprites2x: sprite-map("sprites-retina/buttons/*.png", $spacing: 20px);   // import 2x sprites, 20px padding

// @mixin retina-sprite($name, $hover: false, $active: false) {
//   @include _retina-sprite($name, $sprites, $sprites2x, $hover, $active);
// }

// // The general purpose retina sprite mixin.
//   //
//   //    @include retina-sprite(name, $spritemap1, $spritemap2)
//   //    @include retina-sprite(name, $spritemap1, $spritemap2[, $dimensions: true, $pad: 0])
//   //
//   //    If `dimensions` is true, then width/height will also be set.
//   //
//   //    if `pad` is non-zero, then that's how much padding the element will have (requires
//   //    $spacing on the sprite maps). Great for iPhone interfaces to make hit areas bigger.
//   //
// @mixin _retina-sprite($name, $sprites, $sprites2x, $hover, $active, $dimensions: true, $pad: 0) {  
//   @if $dimensions == true {
//     @include sprite-dimensions($sprites, $name);
//   }
//   background-image: sprite-url($sprites);
//   background-position: sprite-position($sprites, $name, -$pad, -$pad);
//   background-repeat: no-repeat;

//   @if $hover == true {
//     $name_hover: $name + _hover;
//     &:hover {
//       background-position: sprite-position($sprites, $name_hover, -$pad, -$pad);
//     }
//   }
//   @if $active == true {
//     $name_active: $name + _active;
//     &:active {
//       background-position: sprite-position($sprites, $name_active, -$pad, -$pad);
//     }
//   }
  
//   @if $pad > 0 {
//     padding: $pad;
//   }
  
//   @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) {
//     & {
//       $pos: sprite-position($sprites2x, $name, -$pad * 2, -$pad * 2);
//       background-image: sprite-url($sprites2x);
//       background-position: nth($pos, 1) nth($pos, 2) / 2;
//       @include background-size(ceil(image-width(sprite-path($sprites2x)) / 2) auto);
//       //  sprite-path() returns the path of the generated sprite sheet, which
//       //  image-width() calculates the width of. the ceil() is in place in case
//       //  you have sprites that have an odd-number of pixels in width
      
//       @if $hover == true {
//         $name_hover: $name + _hover;    // create myButton_hover and assign it
//         &:hover{
//           $pos: sprite-position($sprites2x, $name_hover, -$pad * 2, -$pad * 2);
//           background-position: nth($pos, 1) nth($pos, 2) / 2;
//         }
//       }
//       @if $active == true {
//         $name_active: $name + _active;    // create myButton_active and assign it
//         &:active{
//           $pos: sprite-position($sprites2x, $name_active, -$pad * 2, -$pad * 2);
//           background-position: nth($pos, 1) nth($pos, 2) / 2;
//         }
//       }
//     }
//   }
// }
